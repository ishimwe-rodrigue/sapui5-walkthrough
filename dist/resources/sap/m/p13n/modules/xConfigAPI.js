/*!
 * OpenUI5
 * (c) Copyright 2009-2024 SAP SE or an SAP affiliate company.
 * Licensed under the Apache License, Version 2.0 - see LICENSE.txt.
 */
sap.ui.define(["sap/base/util/merge","sap/ui/core/util/reflection/JsControlTreeModifier"],(e,t)=>{"use strict";const n={};n.enhanceConfig=(r,o)=>{const i=o.propertyBag;const a=i?i.modifier:t;let s;let g;return a.getControlMetadata(r).then(e=>{s=e;o.controlMetadata=s;return a.getAggregation(r,"customData")}).then(e=>Promise.all(e.map(e=>a.getProperty(e,"key"))).then(t=>e.reduce((e,n,r)=>t[r]==="xConfig"?n:e,undefined))).then(t=>{g=t;if(g){return a.getProperty(g,"value").then(t=>e({},JSON.parse(t.replace(/\\/g,""))))}return{}}).then(t=>{let s;if(o.controlMeta&&o.controlMeta.aggregation){s=n.createAggregationConfig(r,o,t)}else{s=n.createPropertyConfig(r,o,t)}if(o.markAsModified){s.modified=true}const c=i?i.appComponent:undefined;let f=Promise.resolve();if(g&&r.isA){f=a.removeAggregation(r,"customData",g).then(()=>a.destroy(g))}return f.then(()=>a.createAndAddCustomData(r,"xConfig",JSON.stringify(s),c).then(()=>e({},s)))})};n.readConfig=(n,r)=>{if(r){const o=r.propertyBag?r.propertyBag.modifier:t;return o.getAggregation(n,"customData").then(e=>Promise.all(e.map(e=>o.getProperty(e,"key"))).then(t=>e.reduce((e,n,r)=>t[r]==="xConfig"?n:e,undefined))).then(t=>{if(t){return o.getProperty(t,"value").then(t=>e({},JSON.parse(t.replace(/\\/g,""))))}return null})}const o=(e,t)=>{const n=(e,t)=>{if(e){if(e.getMetadata){const n=e.getMetadata();const r=n.getAllAggregations();if(r){return r[t]}}}return undefined};const r=n(e,t);if(r){return e[r._sGetter]()}return undefined};const i=(e,t)=>{const n=e.getMetadata().getPropertyLikeSetting(t);if(n){const t=n._sGetter;return e[t]()}return undefined};const a=o(n,"customData").find(e=>i(e,"key")=="xConfig");const s=a?e({},JSON.parse(i(a,"value").replace(/\\/g,""))):null;return s};const r=function(t,n,r){const o=r.key||r.name;const i=r.controlMeta;const a=r.value;const s=r.controlMetadata||t.getMetadata();const g=i.aggregation;const c=g?g:s.getDefaultAggregation().name;const{currentState:f}=r;const p=a.index;const{operation:d}=r;const l=e([],f||[]);const u={add:(e,t)=>{l.splice(t,0,{key:e})},remove:(e,t)=>{l.splice(t,1)},move:(e,t)=>{const n=l?.find(t=>t.key==e);const r=l?.indexOf(n);if(r>-1){const[e]=l.splice(r,1);l.splice(t,0,e)}}};if(f instanceof Array&&d&&u[d]instanceof Function){u[d](o,p)}l.forEach((e,t)=>{const r=n.aggregations[c]?.[e.key];if(r&&r.hasOwnProperty("position")){r.position=t}else if(!r){const r=f?.findIndex(t=>t.key===e.key);if(t!==undefined&&r!==t&&t!==-1){n.aggregations[c][e.key]={position:t}}}})};n.createAggregationConfig=(e,t,n)=>{const o=t.key||t.name;const i=t.controlMeta;const a=t.property;const s=t.value;const g=t.controlMetadata||e.getMetadata();const c=i.aggregation;const f=c?c:g.getDefaultAggregation().name;const p=n||{};if(!p.hasOwnProperty("aggregations")){p.aggregations={}}if(!p.aggregations.hasOwnProperty(f)){if(g.hasAggregation(f)){p.aggregations[f]={}}else{throw new Error("The aggregation "+f+" does not exist for"+e)}}if(!p.aggregations[f].hasOwnProperty(o)){p.aggregations[f][o]={}}if(s!==null||s&&s.hasOwnProperty("value")&&s.value!==null){switch(t.operation){case"move":r(e,p,t);p.aggregations[f][o][a]=s.index;if(s.persistenceIdentifier){p.aggregations[f][o]["persistenceIdentifier"]=s.persistenceIdentifier}break;case"remove":case"add":default:if(s.hasOwnProperty("value")){p.aggregations[f][o][a]=s.value;if(s.index!==undefined){p.aggregations[f][o]["position"]=s.index}if(s.persistenceIdentifier){p.aggregations[f][o]["persistenceIdentifier"]=s.persistenceIdentifier}}else{p.aggregations[f][o][a]=s}r(e,p,t);break}}else{delete p.aggregations[f][o][a];if(Object.keys(p.aggregations[f][o]).length===0){delete p.aggregations[f][o];if(Object.keys(p.aggregations[f]).length===0){delete p.aggregations[f]}}}return p};n.createPropertyConfig=(e,t,n)=>{const r=t.value;const o=t.property;const i=n||{};if(!i.properties){i.properties={}}if(!i.properties.hasOwnProperty(o)){i.properties[o]=[]}const a=t.operation;const s=i.properties[o].find(e=>e.key===t.key);if(s&&a!=="add"){i.properties[o].splice(i.properties[o].indexOf(s),1)}if(a!=="remove"){i.properties[o].splice(t.value.index,0,r)}return i};return n});
//# sourceMappingURL=xConfigAPI.js.map